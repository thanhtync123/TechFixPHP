// Chu·∫©n ho√° ti·∫øng Vi·ªát: b·ªè d·∫•u + lowercase
function removeDiacritics(str) {
  if (!str) return '';
  return String(str).normalize('NFD')
    .replace(/[\u0300-\u036f]/g, '')
    .replace(/ƒë/g, 'd').replace(/ƒê/g, 'D');
}
function vnNorm(s) { return removeDiacritics(s).toLowerCase(); }

// √Åp d·ª•ng cho to√†n b·ªô DataTables: chu·∫©n ho√° d·ªØ li·ªáu c·ªôt khi search
$.fn.dataTable.ext.type.search.html = function(data) {
  return vnNorm(String(data).replace(/<[^>]*>/g, ' '));
};
$.fn.dataTable.ext.type.search.string = function(data) {
  return vnNorm(String(data));
};

// ƒê·∫∑t m·∫∑c ƒë·ªãnh chung cho t·∫•t c·∫£ DataTables
$.extend(true, $.fn.dataTable.defaults, {
  order: [],                // gi·ªØ nguy√™n th·ª© t·ª± DOM (v√≠ d·ª• DESC t·ª´ SQL)
  pageLength: 50,
  lengthMenu: [5, 10, 20, 50],
  language: {
    search: "üîç T√¨m ki·∫øm:",
    lengthMenu: "Hi·ªÉn th·ªã _MENU_ d√≤ng",
    info: "Trang _PAGE_ / _PAGES_",
    paginate: { previous: "‚Üê Tr∆∞·ªõc", next: "Sau ‚Üí" },
    zeroRecords: "Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£"
  },
  search: { smart: true, regex: false }
});

// Chu·∫©n ho√° t·ª´ kho√° ng∆∞·ªùi d√πng cho m·ªçi b·∫£ng c√≥ class .dt-vn
$(document).on('init.dt', function(e, settings) {
  var api = new $.fn.dataTable.Api(settings);
  var tableEl = api.table().node();
  if (!$(tableEl).hasClass('dt-vn')) return; // ch·ªâ √°p d·ª•ng cho b·∫£ng g·∫Øn class n√†y

  var $input = $(api.table().container()).find('input[type=search]');
  $input.off('.vn').on('input.vn', function() {
    api.search(vnNorm(this.value)).draw();
  });
});